# -*- coding: utf-8 -*-
"""ML_Report

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F5dxgmgdLqeVN62MoWDNr5sB-pAHpUM2
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.impute import KNNImputer
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.neural_network import MLPClassifier

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

df = pd.read_csv("/content/data.csv")

cols_to_drop = [col for col in df.columns if 'id' in col.lower() or 'unnamed' in col.lower()]
df.drop(columns=cols_to_drop, inplace=True)

le = LabelEncoder()
df['diagnosis'] = le.fit_transform(df['diagnosis'])

y = df['diagnosis']
X = df.drop(columns=['diagnosis'])

imputer = KNNImputer(n_neighbors=3)
X_imputed = pd.DataFrame(imputer.fit_transform(X), columns=X.columns)
X_imputed['diagnosis'] = y.values

X = X_imputed.drop(columns=['diagnosis'])
y = X_imputed['diagnosis']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

models = {
    "Decision Tree": DecisionTreeClassifier(),
    "Random Forest": RandomForestClassifier(),
    "KNN": KNeighborsClassifier(),
    "Naive Bayes": GaussianNB(),
    "SVM": SVC(),
    "ANN (MLP)": MLPClassifier(max_iter=1000),
    "Linear Regression": LinearRegression()
}

results = []
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_val_scaled)

    if name == "Linear Regression":
        y_pred = np.round(y_pred).astype(int)
        y_pred = np.clip(y_pred, 0, 1)

    results.append({
        "Model": name,
        "Accuracy": accuracy_score(y_val, y_pred),
        "Precision": precision_score(y_val, y_pred),
        "Recall": recall_score(y_val, y_pred),
        "F1 Score": f1_score(y_val, y_pred)
    })

results_df = pd.DataFrame(results)

plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.bar(results_df["Model"], results_df["Accuracy"], color="skyblue")
plt.title("Model Accuracy")
plt.ylabel("Accuracy")
plt.xticks(rotation=30)

plt.subplot(1, 2, 2)
plt.bar(results_df["Model"], results_df["F1 Score"], color="salmon")
plt.title("Model F1 Score")
plt.ylabel("F1 Score")
plt.xticks(rotation=30)

plt.tight_layout()
plt.show()

print(results_df)
